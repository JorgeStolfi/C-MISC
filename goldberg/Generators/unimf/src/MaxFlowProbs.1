NAME
    MaxFlowProbs - generate unit-cost max-flow problems
     
SYNOPSIS
    MaxFlowProbs \
      -seed NUM \
      [ -dontScramble | -reverse ] \
      SUBSTSPECS...
      
    where SUBSTSPECS is
    
      -subst FRACTION MARKS \
        -by FAMILY \
        -NV NUM -NE NUM -W WIDTH -L LENGTH
       

DESCRIPTION
    MaxFlowProbs generates semi-random instances of the directed
    maximum flow problem of graph theory.
    
    MaxFlowProbs writes to its standard output a description of a
    directed multigraph. The vertices are the integers in some range
    [1..N].  Each edge is an ordered pair (origin, destination) of
    vertex numbers.  Each edge is tagged with an integer `capacity',
    which can be interpreted as the edge's multiplicity.  The output
    also designates two distinct vertices s and t as the `source' and
    `sink' of the flow.
    
    Internally, each edge is also labelled with a `mark', an ASCII
    letter.  By convention, the edges labeled with uppercase letters
    constitute one particular maximum-capacity flow from s to t.
    This property means that, if we reverse the direction of all
    uppercase-marked edges, there will be no directed path from s to t.
    
    Currently, any graph G generated by MaxFlowProbs has a unique
    maximum flow.  This property means that if we add to the graph G
    one edge from t to s, and reverse the direction of all uppercase
    edges, we obtain an acyclic graph. (Let's call this the Uniqueness
    Lemma.)
    
    MaxFlowProbs begins by building a trivial graph G[0] (only two
    vertices, s and t, connected by a single edge, marked 'T'), and
    then applies to it zero or more passes of an edge substitution
    procedure, obtaining graphs G[1], G[2],...
    
    At pass k, a certain subset of the edges of G[k-1] is chosen.
    Every chosen edge is replaced by an instance of a directed graph
    (a `block') with one source (the edge's origin) and one sink (the
    edge's destination).  Thus, all the vertices of G[k-1], and some
    of its edges, are preserved in G[k].
    
    In each pass, all substituted blocks are semi-random instances of
    the same graph family.  The family is identified by a name (e.g.,
    "Rete") and additional parameters (number of vertices, number of
    edges, etc.)
    
    The edges of G[k-1] to be replaced are a random subset of the
    edges that bear specified mark.  For example, the user may ask
    that, on pass 3, 50% of all edges marked 'A' or 'B' or 'x' be
    replaced by blocks of a given kind.
    
    Before being substituted for its chosen edge, every block
    introduced in pass k has a maximum flow from its source to its
    sink with the same capacity W; and the maximum flow in the reverse
    direction (from its sink to its source) is zero.  After the
    substitution, the edge capacities of the block are multiplied by
    the capacity c of the original edge; so the maximum flow through
    the block becomes c * W.
    
    Moreover, if the substitution condition specifies any uppercase
    marks, then all UNreplaced edges with uppercase marks will have
    their capacities multiplied by W.
    
    When replacing an uppercase-marked edge, the marks on the block's
    edges are preserved.  When replacing a lowercase-marked edge, the
    marks on the block's edges are converted to their lowercase
    equivalents.
    
    It follows that, after all substitutions of pass k, the edges of
    G[k] with uppercase marks still constitute a flow, with capacity W
    times the maximum flow of G[k-1].  In view of the Uniqueness
    Lemma, this flow is still maximum and unique.
    
    Before writing the final graph, MaxFlowProbs may randomly scramble
    or complement the vertex numbers.
    
    The edge marks are not written; but, optionally, MaxFlowProbs can 
    omit from the output graph any edges bearing certain
    marks.  In the current version, the edges that belong to some
    maximum flow are identified by the mark 'T'.
    
    NOTE: Partial replacement of uppercase edges may generate edges with 
    capacity greater than 1.  In the present version of the program, 
    such requests are treated as errors: all capacities
    are restricted to unity.  Therefore, partial replacement of
    uppercase edges is legal only if the replacement blocks have W = 1.


GENERAL OPTIONS

    -seed NUMBER
    
      A seed for the random number generator. 
      Currently limited to [0..999].

    -dontScramble  
    
      Leave vertex numbers as they resulted from the 
      substitution process.
      
    -reverse
    
      Reverse the vertex numbering before writing 
      the graph.
      
    -writeOnly MARKS
    
      Writes only the edges with the specified marks.
    
    -subst FRACTION MARKS -by FAMILY PARAMETERS
    
      Replace the specified FRACTION of the
      edges carrying the specified MARKS by instances
      of FAMILY graphs, with the specified PARAMETERS
    
PARAMETERS FOR SUBSTITUTED GRAPHS

    -NV NUMBER 
     
       The total number of vertices in each block,
       including its source and sink.
      
    -NE NUMBER
    
        The total number of distinct edges in each block.
      
    -W NUMBER
    
        The nominal `width' of the block. Usually, it is the
        magnitude of the maximum flow.
      
    -L NUMBER
    
        The nominal `length' of the block. Usually, it is 
        the mean number of edges traversed by a flow particle.
    
BLOCK FAMILIES

    The only family implemented so far is
    
      Rete  
      
        A "Rete" block consists of W `red' paths of length L
        from s to t, which define the (unique) maximum flow, plus
        possibly some `green' edges and vertices which cannot be
        in any flow.

        The red paths are edge-disjoint, and vertex-disjoint except for
        their endpoints.
        
        There is an ordering of the block vertices so that: (1) every
        red path is increasing; (2) the internal vertices of every red
        path are consecutive; and (3) all internal vertices of red
        path i are greater than those of red path j whenever i > j.
        
        The green vertices, if any, are distributed in the gaps
        between the vertices of consecutive red paths.  The green
        edges, if any, are all decreasing, and do not touch s and
        t. They are chosen at random, with a bias toward edges that
        provide short paths from s to t.
        
        For this family, one must specify NE >= W*L, NV >= W*(L-1).
        
        If L=1, then there will be a single red edge from s to t, with
        capacity (multiplicity) W.  Otherwise, all edges will have
        unit capacity.
        
        The red edges will be marked 'T', the others 'f'.
        
        In particular, if W = 1, NV = L-1, and NE = L, then the 
        block is simply a path of length L from s to t.

AUTHOR
    J. Stolfi, IC/Unicamp, april 1997.

    
