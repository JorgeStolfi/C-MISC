# -*- makefile -*-
# If you don't have GNU make this would be a good time to go get it, 
# because installing GNU make is likely to be easier than figuring out 
# how to compile this software without it.

# location of source distribution
BASE = /ac/res/cs3/avg/progs/bim/BIM

# names of needed programs
CC = gcc
CXX = g++
INSTALL = cp
#SHELL = csh

# add any extra system dependent compiler flags here
C_SYSTEM_FLAGS =
CXX_SYSTEM_FLAGS =
# add any extra include paths here
C_INCLUDE_DIR +=   # -I/someplace/include
CXX_INCLUDE_DIR += # -I/someplace/include
# add any extra library paths here
C_LIB_FLAGS +=   # -L/someplace/lib
CXX_LIB_FLAGS += # -L/someplace/lib
# add any extra libraries to link in here
C_LIBS +=   # -lsomelib
CXX_LIBS += # -lsomelib

# various sets of CFLAGS can be selected by setting variables
# when make is invoked. This can be done conveniently on the command line, 
# allows for different builds without editing the makefile
# to use, the invocation of make is
# make target variable=value

# these flags get used if debug is set
DEBUG_FLAGS = -ggdb -Wall -Wno-unused
# these flags get used is debug=2
ifeq ($(debug), 2)
DEBUG_FLAGS += -DDEBUG_TRACE
endif
# these flags get used if debug is not set
OPT_FLAGS = -O4 -DNDEBUG -Wall -Wno-unused

# these flags get added if prof is set
PROF_FLAGS = -pg

##################################################################
# shouldn't need to change anything below here

# binaries are installed in ${BASE}/bin unless a lower level Makefile
# overrides
ifndef BIN_DIR
BIN_DIR = ${BASE}/bin
endif

ifdef debug
CXXFLAGS += $(DEBUG_FLAGS)
CFLAGS += $(DEBUG_FLAGS)
else
CXXFLAGS +=  $(OPT_FLAGS)
CFLAGS += $(OPT_FLAGS)
endif

ifdef prof
CXXFLAGS += $(PROF_FLAGS)
CFLAGS += $(PROF_FLAGS)
endif

INCLUDE_DIR += ${BASE}/include
COMMON_DIR = ${BASE}/common

C_INCLUDE_DIR += -I$(COMMON_DIR) -I. 
CFLAGS += $(C_SYSTEM_FLAGS) $(C_INCLUDE_DIR) 

CXX_INCLUDE_DIR += -I$(INCLUDE_DIR) -I$(COMMON_DIR) -I.
CXXFLAGS += $(CXX_SYSTEM_FLAGS) $(CXX_INCLUDE_DIR) 

###################################################################

all: $(BINARIES) $(OBJS)

ifndef NO_INSTALL
install: $(BINARIES) $(OBJS)
	$(INSTALL) $(BINARIES) $(BIN_DIR)	

uninstall:
	rm -f $(addprefix $(BIN_DIR)/, $(BINARIES))

clean:
	rm -f $(BINARIES) *.o 

realclean: clean
	rm -f $(BINARIES:%=.%.d) $(OBJS:%.o=.%.d) 
endif

ifeq ($(suffix $(MAIN)),.cc)
# rule to generate dependencies for C++
.%.d: $(MAIN)
	$(CXX) -MM $(CXXFLAGS) $($(@)_opts) $< |sed "/${<:%.cc=%.o}/s//$*/" >$@
# rule to remake binaries for C++
$(BINARIES): $(MAIN) $(OBJS)
	$(CXX) $(CXXFLAGS) $(CXX_LIB_FLAGS) $($(@)_opts) $(MAIN) $(OBJS) -o $@ $(CXX_LIBS)
else
# rule to generate dependencies for C
ifndef MAIN
.%.d : %.c
	$(CC) -MM $(CFLAGS) $($(@)_opts)  $< |sed "/${<:%.c=%.o}/s//$*/" >$@
else
.%.d: $(MAIN)
	$(CC) -MM $(CFLAGS) $($(@)_opts)  $< |sed "/${<:%.c=%.o}/s//$*/" >$@
endif
# rule to remake binaries for C
$(BINARIES): $(MAIN) $(OBJS)
	$(CC) $(CFLAGS) $(C_LIB_FLAGS) $($(@)_opts) $(MAIN) $(filter %.o, $^) -o $@ $(C_LIBS)
endif

# include the dependencies
# setting ndep inhibits this step. desirable usage:
# make clean ndep=1 
ifndef ndep
-include $(BINARIES:%=.%.d)
ifdef OBJS
-include $(OBJS:%.o=.%.d)
endif
endif


